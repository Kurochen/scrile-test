{"version":3,"sources":["FilterFragment.js","FilterInput.js","Filter.js","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useStyles","makeStyles","text","paddingLeft","textEmail","color","fontSize","FilterFragment","props","classes","splitEmail","option","email","split","Fragment","Avatar","alt","src","thumbnailUrl","className","Typography","name","theme","inputInput","padding","spacing","transition","transitions","create","minWidth","circular","height","position","display","alignItems","div","flexDirection","FilterInput","useState","open","setOpen","options","setOptions","loading","length","useEffect","active","a","fetch","responseUsers","json","users","responsePhotos","photos","merge","map","t1","find","t2","id","Autocomplete","onOpen","onClose","getOptionLabel","renderOption","selected","renderInput","params","ref","InputProps","InputBase","inputProps","placeholder","input","CircularProgress","size","search","searchIcon","Filter","Paper","style","backgroundColor","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0cc188f4.chunk.js","sourcesContent":["import React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Avatar, Typography } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    text: {\r\n        paddingLeft: '10px'\r\n    },\r\n    textEmail: {\r\n        color: '#98999A',\r\n        fontSize: \"0.9rem\"\r\n    },\r\n}));\r\n\r\nconst FilterFragment = (props) => {\r\n    const classes = useStyles();\r\n    const splitEmail = `@${props.option.email.split('@')[0]}`\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Avatar alt=\"\" src={props.option.thumbnailUrl} />\r\n            <div className={classes.text}>\r\n                <Typography > {props.option.name}</Typography>\r\n                <Typography className={classes.textEmail}> {splitEmail}</Typography>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default FilterFragment\r\n\r\n","import { useState, useEffect } from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport { Autocomplete } from '@material-ui/lab';\r\nimport FilterFragment from './FilterFragment';\r\nimport { CircularProgress } from '@material-ui/core';\r\n\r\nfunction sleep(delay = 0) {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay);\r\n    });\r\n}\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    inputInput: {\r\n        padding: theme.spacing(2.1, 2.1, 2.1, 0),\r\n        paddingLeft: `calc(1em + ${theme.spacing(5)}px)`,\r\n        transition: theme.transitions.create('width'),\r\n        minWidth: '280px'\r\n    },\r\n    circular: {\r\n        padding: theme.spacing(0, 2),\r\n        height: '100%',\r\n        position: 'absolute',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n    },\r\n    div: {\r\n        display: 'flex',\r\n        flexDirection: 'row-reverse',\r\n        alignItems: 'center'\r\n    }\r\n}));\r\n\r\nconst FilterInput = (props) => {\r\n    const classes = useStyles();\r\n\r\n    const [open, setOpen] = useState(false);\r\n    const [options, setOptions] = useState([]);\r\n    const loading = open && options.length === 0;\r\n\r\n    useEffect(() => {\r\n        let active = true;\r\n\r\n        if (!loading) {\r\n            return undefined;\r\n        }\r\n\r\n        (async () => {\r\n            //  await sleep(3e3); // For demo purposes.\r\n            const responseUsers = await fetch('https://jsonplaceholder.typicode.com/users');\r\n            const users = await responseUsers.json();\r\n            const responsePhotos = await fetch('https://jsonplaceholder.typicode.com/photos');\r\n            const photos = await responsePhotos.json();\r\n            const merge = users.map(t1 => ({ ...t1, ...photos.find(t2 => t2.id === t1.id) }))\r\n\r\n            if (active) {\r\n                setOptions(merge);\r\n            }\r\n        })();\r\n\r\n        return () => {\r\n            active = false;\r\n        };\r\n\r\n    }, [loading]);\r\n\r\n    useEffect(() => {\r\n        if (!open) {\r\n            setOptions([]);\r\n        }\r\n    }, [open]);\r\n\r\n    return (\r\n        <Autocomplete\r\n            open={open}\r\n            onOpen={() => {\r\n                setOpen(true);\r\n            }}\r\n            onClose={() => {\r\n                setOpen(false);\r\n            }}\r\n            options={options}\r\n            loading={loading}\r\n            getOptionLabel={(option) => option.name}\r\n            renderOption={(option, { selected }) => (\r\n                <FilterFragment option={option} selected={selected} />\r\n            )}\r\n            renderInput={(params) => (\r\n                <div ref={params.InputProps.ref} className={classes.div}>\r\n                    <InputBase\r\n                        {...params.inputProps}\r\n                        placeholder=\"Searchâ€¦\"\r\n                        classes={{\r\n                            input: classes.inputInput,\r\n                        }}\r\n                        inputProps={{\r\n                            'aria-label': 'search'\r\n                        }}\r\n                    />\r\n                    {loading &&\r\n                        <div className={classes.circular}>\r\n                            <CircularProgress color=\"inherit\" size={25} />\r\n                        </div>\r\n                    }\r\n                </div>\r\n            )}\r\n        />\r\n    )\r\n}\r\n\r\nexport default FilterInput\r\n\r\n","import { makeStyles } from '@material-ui/core/styles';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport { Paper } from '@material-ui/core';\r\nimport FilterInput from './FilterInput'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    search: {\r\n        position: 'relative',\r\n    },\r\n\r\n    searchIcon: {\r\n        padding: theme.spacing(0, 2),\r\n        height: '100%',\r\n        position: 'absolute',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        color: '#656667'\r\n    },\r\n}));\r\n\r\nconst Filter = (props) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.search}>\r\n            <Paper style={{ backgroundColor: \"#F9F9F9\" }}>\r\n                <div className={classes.searchIcon}>\r\n                    <SearchIcon />\r\n                </div>\r\n                <FilterInput />\r\n            </Paper>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Filter\r\n\r\n","import './App.css';\nimport Filter from './Filter'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Filter className=\"App-logo\" />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}